<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HomePage on harutiro's site</title><link>https://harutiro.net/</link><description>Recent content in HomePage on harutiro's site</description><generator>Hugo</generator><language>ja</language><lastBuildDate>Wed, 01 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://harutiro.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Androidを勉強してみようの記事 in 2024</title><link>https://harutiro.net/articles/androidstudyin2024/</link><pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate><guid>https://harutiro.net/articles/androidstudyin2024/</guid><description>&lt;h1 id="環境について">環境について&lt;/h1>
&lt;p>今回のAndroidStudioのバージョンは&lt;code>Android Studio Jellyfish | 2023.3.1&lt;/code>でやっていきます。&lt;/p>
&lt;img width="450" alt="image.png (120.6 kB)" src="https://img.esa.io/uploads/production/attachments/13979/2024/05/02/129607/c852792c-03a0-4245-a48e-408f9f224ea6.png">
&lt;p>最近のバージョンだとGeminiを用いてAIと対話しながら開発ができるらしいです。
使ったことはないのでどれくらい精度がいいかはわかりませんが、GitHubCopilotくんを使うお金がない方などは使ってみてもいいかもしれないです。
&lt;img width="627" alt="スクリーンショット 0006-05-02 0.25.50.png (303.4 kB)" src="https://img.esa.io/uploads/production/attachments/13979/2024/05/02/129607/aa71ee20-7697-43c8-bfd4-78a890a82b22.png">&lt;/p>
&lt;p>とりあえず、最新を使いましょう。&lt;/p>
&lt;p>&lt;a href="https://developer.android.com/studio?hl=ja&amp;amp;_gl=1*160el0k*_up*MQ..*_ga*Mzk0Nzg2Nzg0LjE3MTQ1NzY3MzE.*_ga_6HH9YJMN9M*MTcxNDU3NjczMC4xLjAuMTcxNDU3NjczMC4wLjAuMA.." target="_blank" rel="noopener" >インストールリンク&lt;/a>&lt;/p>
&lt;h1 id="最初の導入-モバイル開発とはどんな感じかをお話しします">最初の導入 モバイル開発とはどんな感じかをお話しします。&lt;/h1>
&lt;iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSUYHaglKjkocTvVgLCKw5Np0DlzyVuDR6EtEP6XvlCDhbxPmuVkm45SiZ5Z4NitAO4jxTY8XYJyQGj/embed?start=false&amp;loop=true&amp;delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true">&lt;/iframe>
&lt;p>&lt;a href="https://docs.google.com/presentation/d/1wgY9WbdLNKvvWbbJlmStjmwVL3vXPX_CoIOe4G8A7Gk/edit?usp=sharing" target="_blank" rel="noopener" >スライドリンク&lt;/a>&lt;/p>
&lt;h1 id="おすすめの本">おすすめの本&lt;/h1>
&lt;ul>
&lt;li>おすすめの本
&lt;ul>
&lt;li>初めてのAndroidプログラミング
&lt;img width="300" alt="71ce43XdxlL.jpg (231.8 kB)" src="https://img.esa.io/uploads/production/attachments/13979/2021/06/10/84962/cfe0ba13-5889-4a67-86f0-d16e41eae674.jpg">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="androiddevelopersは便利だよ">AndroidDevelopersは便利だよ&lt;/h1>
&lt;p>ちょっと前までは英語の記事だったり、少しわかりずらいなどがありましたが、今はすごくわかりやすくいい記事がたくさんあります。
ぜひ、ここの公式サイトを色々みてみると面白いかもしれないです。
&lt;a href="https://developer.android.com/?hl=ja" target="_blank" rel="noopener" >https://developer.android.com/?hl=ja&lt;/a>&lt;/p>
&lt;h1 id="ライフサイクルは大事よくわからなかったら飛ばしてもok">ライフサイクルは大事(よくわからなかったら飛ばしてもOK)&lt;/h1>
&lt;ul>
&lt;li>ただのJavaのプログラムとAndroidのアプリの違いは？&lt;/li>
&lt;li>Androidアプリには、端末サイドでアプリを起動した時、アプリを立ち上げた後にホームに戻った時、アプリをタスキルした時とかタイミングがある。&lt;/li>
&lt;/ul>
&lt;img width="513" alt="activity_lifecycle.png (45.7 kB)" src="https://img.esa.io/uploads/production/attachments/13979/2021/07/09/84962/06cd2b16-5e50-4bf5-9102-51d265ba0a53.png">
&lt;ul>
&lt;li>↑アクティビティのライフサイクル。&lt;/li>
&lt;li>アプリは起動すると、作られて、始まって、、、みたいなの。&lt;/li>
&lt;/ul>
&lt;h1 id="具体的な内容">具体的な内容&lt;/h1>
&lt;p>以下の記事をみなさんに進めてもらいます。
その中でわからないところがあったら、適宜教えにいくスタイルにします。
残り1時間ぐらいになったら、今できている範囲で何か面白いひと工夫をWebなどで調べながら実装してもらって、少し発表会をして終わる感じにします。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.android.com/codelabs/basic-android-kotlin-compose-first-app?continue=https%3A%2F%2Fdeveloper.android.com%2Fcourses%2Fpathways%2Fandroid-basics-compose-unit-1-pathway-2%23codelab-https%3A%2F%2Fdeveloper.android.com%2Fcodelabs%2Fbasic-android-kotlin-compose-first-app&amp;amp;%3Bhl=ja&amp;amp;hl=ja#0" target="_blank" rel="noopener" >AndroidでHelloWorld&lt;/a>
&lt;ul>
&lt;li>とりあえず、アプリを作ってみて、出力される文字を変えてみるだけ。&lt;/li>
&lt;li>動作確認だけです。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>JetpackComposeで画面の表示の基礎
&lt;ul>
&lt;li>わかるところは飛ばして進めます。&lt;/li>
&lt;li>一部いらないところはスキップしていきます。&lt;/li>
&lt;li>&lt;a href="https://developer.android.com/courses/android-basics-compose/unit-1?hl=ja" target="_blank" rel="noopener" >ユニット 1: 初めての Android アプリ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.android.com/courses/android-basics-compose/unit-2?hl=ja" target="_blank" rel="noopener" >ユニット 2: アプリ UI を作成する&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.android.com/courses/android-basics-compose/unit-3?hl=ja" target="_blank" rel="noopener" >ユニット 3: リストの表示とマテリアル デザインの使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Androidを使いこなす
&lt;ul>
&lt;li>&lt;a href="https://developer.android.com/courses/android-basics-compose/unit-5?hl=ja" target="_blank" rel="noopener" >ユニット 5: インターネットに接続する&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.android.com/courses/android-basics-compose/unit-6?hl=ja" target="_blank" rel="noopener" >ユニット 6: データの永続化&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>TrainAlert「トレアラ」～電車乗り過ごし防止アプリ～</title><link>https://harutiro.net/portfolio/trainalert/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://harutiro.net/portfolio/trainalert/</guid><description>&lt;h1 id="概要">概要&lt;/h1>
&lt;p>電車に乗っている際には様々な誘惑があると思います。
スマホを開けば、様々なコンテンツが広がり、椅子に座れば寝ることもできます。
そんな車内においてやれることが多い電車という交通手段ですが、一方でつい別のことに気をとられてしまい、乗り過ごしてしまうことがあります。&lt;/p>
&lt;p>この課題を解決するため、「トレアラ」は自動で通知を送信します。
事前に降車駅や乗換駅、乗る時間帯などの情報を登録しておくことで、駅に到着する前に通知を送信し、あなたのスマホがもうすぐ降りる時間であることをお知らせしてくれます。&lt;/p>
&lt;p>拘ったポイントとしては、上記の機能に加えてUIが挙げられます。
誰が見ても直感的に操作ができるようにするためにマテリアルデザインに準拠したデザインを活用し、各項目が何を表しているのか見ただけでわかるようにするためにIconを活用するといったの工夫を行いました。
またGoogleMapをアプリ内に埋め込むことで、どこの駅で通知をされるのか円や線を用いて表示し、リアルタイムで閲覧することもできます。&lt;/p>
&lt;p>今後としては現在いただいたフィードバックをもとに、通知メッセージをタップするまでの間はバイブレーションを止めないようにする機能や、イヤホン装着時のみ通知に音を流すなど、通知機能に関する強化を行っていきたいと考えています。
また細かいUIを改善していき、ユーザー目線の開発を行っていく予定です。&lt;/p></description></item><item><title>「Clips」～新しいカタチのお気に入り保存アプリ～</title><link>https://harutiro.net/portfolio/clips/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://harutiro.net/portfolio/clips/</guid><description>&lt;h1 id="概要">概要&lt;/h1>
&lt;p>コンセプトとしては、簡単になおかつわかりやすく保存をするアプリとしています。&lt;/p>
&lt;p>ターゲットとしては、つい保存したデータを無くしてしまい、どこにやったのかわからなくなっている人としています。また、Lineなどのメッセージ系SNSを使いデータを保存していて、保存期間がついつい過ぎてしまいデータが消えてしまった経験をよくする人もしています。&lt;/p>
&lt;p>データの入力の面でポイントとなる機能は、共有を使い、ブラウザや文字などをアプリに飛ばし簡単にデータの保存をできること、そのときにファビコンやウェブページのタイトルの取得をしてくれることです。
また、タグを用いデータの探索の時間を大幅に削れるように工夫をしました。&lt;/p>
&lt;p>データの検索の面でのポイントとなる機能は、アーカイブ機能を用い、用済みになったデータと今必要なデータで仕分けができるようになった点です。他にはタイトルと内容に文字列検索をかけることができ、タグを付け忘れてしまったデータでも探せるようになりました。&lt;/p>
&lt;p>今回UI面でも気をつけて作成しました。誰が見ても直感的に操作ができるようにマテリアルデザインに準拠して作成をしました。
また、この項目が何を表しているのか見ただけでわかるようにIconを用いました。&lt;/p>
&lt;p>今後としては、FireBaseを用いデータをAndroidやios、PCでも確認できるようにすることや、タグを自動的に振り分けれるよにする機能などを追加していきたいと考えています。&lt;/p>
&lt;h1 id="技術構成">技術構成&lt;/h1>
&lt;p>作成の動機としては、前期、教科書の「Realm」と「リサイクラービュー」を用い、レシートをカメラを使い保存をするというアプリ「ＲｅｃｅＣａｍｅ」を作りました。しかし、たくさんデータを保存していくとデータがごちゃついて、探しにくくなってしまうと考えたため、そこに「分類」というアイディアを掛け合わせてみました。そして出来上がったアプリは、「Clips」です。&lt;/p></description></item><item><title>SIW 〜System Infomation Web〜</title><link>https://harutiro.net/portfolio/siw/</link><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate><guid>https://harutiro.net/portfolio/siw/</guid><description>&lt;h1 id="概要">概要&lt;/h1></description></item><item><title>在庫管理お知らせアプリ</title><link>https://harutiro.net/portfolio/potimane/</link><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate><guid>https://harutiro.net/portfolio/potimane/</guid><description>&lt;h1 id="概要">概要&lt;/h1></description></item><item><title/><link>https://harutiro.net/graph1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://harutiro.net/graph1/</guid><description>&lt;!DOCTYPE html>
&lt;html>

&lt;head>
 &lt;meta charset="utf-8">
 &lt;title>TEST&lt;/title>
 &lt;meta name="viewport" content="width=device-width,initial-scale=1.0">
 &lt;script
 src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@next/dist/chartjs-adapter-date-fns.bundle.min.js">&lt;/script>
 &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.js">&lt;/script>
&lt;/head>

&lt;body>
 &lt;div style="width:250px">
 &lt;canvas id="myRadarChart">&lt;/canvas>
 &lt;/div>
 &lt;script>
 var ctx = document.getElementById("myRadarChart");
 var myChart = new Chart(ctx, {
 type: 'radar',
 data: {
 //データの各項目のラベル(上から時計回り)
 labels: ["Docker", "GitHub", "AWS", "Firebase", "GCP"],
 //データ設定
 datasets: [
 {
 //グラフのデータ(上から時計回り)
 data: [50, 70, 20, 60, 20],
 //グラフ全体のラベル
 label: "プラットフォーム",
 //背景色
 backgroundColor: "rgba(255,160,0,0.1)",
 //線の終端を四角にするか丸めるかの設定。デフォルトは四角(butt)。
 borderCapStyle: "butt",
 //線の色
 borderColor: "rgba(255,160,0)",
 //線を破線にする
 borderDash: [],
 //破線のオフセット(基準点からの距離)
 borderDashOffset: 0.0,
 //線と線が交わる箇所のスタイル。初期値は'miter'
 borderJoinStyle: 'miter',
 //線の幅。ピクセル単位で指定。初期値は3。
 borderWidth: 3,
 //グラフを塗りつぶすかどうか。初期値はtrue。falseにすると枠線だけのグラフになります。
 fill: true,
 //複数のグラフを重ねて描画する際の重なりを設定する。z-indexみたいなもの。初期値は0。
 order: 0,
 //0より大きい値にすると「ベジェ曲線」という数式で曲線のグラフになります。初期値は0。
 lineTension: 0
 }
 ]
 },
 options: {
 scales: {
 r: {
 //グラフの最小値・最大値
 min: 0,
 max: 100,
 //背景色
 backgroundColor: 'white',
 //グリッドライン
 grid: {
 color: 'silver',
 },
 //アングルライン
 angleLines: {
 color: 'silver',
 },
 //各項目のラベル
 pointLabels: {
 color: 'black',
 },
 },
 },
 }
 });

 &lt;/script>
 &lt;/div>
&lt;/body>

&lt;/html></description></item><item><title/><link>https://harutiro.net/graph2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://harutiro.net/graph2/</guid><description>&lt;!DOCTYPE html>
&lt;html>

&lt;head>
 &lt;meta charset="utf-8">
 &lt;title>TEST&lt;/title>
 &lt;meta name="viewport" content="width=device-width,initial-scale=1.0">
 &lt;script
 src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@next/dist/chartjs-adapter-date-fns.bundle.min.js">&lt;/script>
 &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.js">&lt;/script>
&lt;/head>

&lt;body>
 &lt;div style="width:250px">
 &lt;canvas id="myRadarChart">&lt;/canvas>
 &lt;/div>
 &lt;script>
 var ctx = document.getElementById("myRadarChart");
 var myChart = new Chart(ctx, {
 type: 'radar',
 data: {
 //データの各項目のラベル(上から時計回り)
 labels: ["Next", "React", "PHP", "Ruby", "java"],
 //データ設定
 datasets: [
 {
 //グラフのデータ(上から時計回り)
 data: [50, 40, 5, 30, 40],
 //グラフ全体のラベル
 label: "フロント",
 //背景色
 backgroundColor: "rgba(255,0,0,0.1)",
 //線の終端を四角にするか丸めるかの設定。デフォルトは四角(butt)。
 borderCapStyle: "butt",
 //線の色
 borderColor: "rgba(255,0,0)",
 //線を破線にする
 borderDash: [],
 //破線のオフセット(基準点からの距離)
 borderDashOffset: 0.0,
 //線と線が交わる箇所のスタイル。初期値は'miter'
 borderJoinStyle: 'miter',
 //線の幅。ピクセル単位で指定。初期値は3。
 borderWidth: 3,
 //グラフを塗りつぶすかどうか。初期値はtrue。falseにすると枠線だけのグラフになります。
 fill: true,
 //複数のグラフを重ねて描画する際の重なりを設定する。z-indexみたいなもの。初期値は0。
 order: 0,
 //0より大きい値にすると「ベジェ曲線」という数式で曲線のグラフになります。初期値は0。
 lineTension: 0
 }
 ]
 },
 options: {
 scales: {
 r: {
 //グラフの最小値・最大値
 min: 0,
 max: 100,
 //背景色
 backgroundColor: 'white',
 //グリッドライン
 grid: {
 color: 'silver',
 },
 //アングルライン
 angleLines: {
 color: 'silver',
 },
 //各項目のラベル
 pointLabels: {
 color: 'black',
 },
 },
 },
 }
 });

 &lt;/script>
 &lt;/div>
&lt;/body>

&lt;/html></description></item><item><title/><link>https://harutiro.net/graph3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://harutiro.net/graph3/</guid><description>&lt;!DOCTYPE html>
&lt;html>

&lt;head>
 &lt;meta charset="utf-8">
 &lt;title>TEST&lt;/title>
 &lt;meta name="viewport" content="width=device-width,initial-scale=1.0">
 &lt;script
 src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@next/dist/chartjs-adapter-date-fns.bundle.min.js">&lt;/script>
 &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.js">&lt;/script>
&lt;/head>

&lt;body>
 &lt;div style="width:250px">
 &lt;canvas id="myRadarChart">&lt;/canvas>
 &lt;/div>
 &lt;script>
 var ctx = document.getElementById("myRadarChart");
 var myChart = new Chart(ctx, {
 type: 'radar',
 data: {
 //データの各項目のラベル(上から時計回り)
 labels: ["Kotlin", "Swift", "Dart", "JetpackCompose", "SwiftUI"],
 //データ設定
 datasets: [
 {
 //グラフのデータ(上から時計回り)
 data: [90, 50, 50, 70, 30],
 //グラフ全体のラベル
 label: "モバイル技術",
 //背景色
 backgroundColor: "rgba(0,0,255,0.1)",
 //線の終端を四角にするか丸めるかの設定。デフォルトは四角(butt)。
 borderCapStyle: "butt",
 //線の色
 borderColor: "rgba(0,0,255)",
 //線を破線にする
 borderDash: [],
 //破線のオフセット(基準点からの距離)
 borderDashOffset: 0.0,
 //線と線が交わる箇所のスタイル。初期値は'miter'
 borderJoinStyle: 'miter',
 //線の幅。ピクセル単位で指定。初期値は3。
 borderWidth: 3,
 //グラフを塗りつぶすかどうか。初期値はtrue。falseにすると枠線だけのグラフになります。
 fill: true,
 //複数のグラフを重ねて描画する際の重なりを設定する。z-indexみたいなもの。初期値は0。
 order: 0,
 //0より大きい値にすると「ベジェ曲線」という数式で曲線のグラフになります。初期値は0。
 lineTension: 0
 }
 ]
 },
 options: {
 scales: {
 r: {
 //グラフの最小値・最大値
 min: 0,
 max: 100,
 //背景色
 backgroundColor: 'white',
 //グリッドライン
 grid: {
 color: 'silver',
 },
 //アングルライン
 angleLines: {
 color: 'silver',
 },
 //各項目のラベル
 pointLabels: {
 color: 'black',
 },
 },
 },
 }
 });

 &lt;/script>
 &lt;/div>
&lt;/body>

&lt;/html></description></item></channel></rss>