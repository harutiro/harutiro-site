<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HomePage on harutiro&#39;s site</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in HomePage on harutiro&#39;s site</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 01 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Androidを勉強してみようの記事 in 2024</title>
      <link>http://localhost:1313/articles/androidstudyin2024/</link>
      <pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/androidstudyin2024/</guid>
      <description>&lt;h1 id=&#34;環境について&#34;&gt;環境について&lt;/h1&gt;&#xA;&lt;p&gt;今回のAndroidStudioのバージョンは&lt;code&gt;Android Studio Jellyfish | 2023.3.1&lt;/code&gt;でやっていきます。&lt;/p&gt;&#xA;&lt;img width=&#34;450&#34; alt=&#34;image.png (120.6 kB)&#34; src=&#34;https://img.esa.io/uploads/production/attachments/13979/2024/05/02/129607/c852792c-03a0-4245-a48e-408f9f224ea6.png&#34;&gt;&#xA;&lt;p&gt;最近のバージョンだとGeminiを用いてAIと対話しながら開発ができるらしいです。&#xA;使ったことはないのでどれくらい精度がいいかはわかりませんが、GitHubCopilotくんを使うお金がない方などは使ってみてもいいかもしれないです。&#xA;&lt;img width=&#34;627&#34; alt=&#34;スクリーンショット 0006-05-02 0.25.50.png (303.4 kB)&#34; src=&#34;https://img.esa.io/uploads/production/attachments/13979/2024/05/02/129607/aa71ee20-7697-43c8-bfd4-78a890a82b22.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;とりあえず、最新を使いましょう。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio?hl=ja&amp;amp;_gl=1*160el0k*_up*MQ..*_ga*Mzk0Nzg2Nzg0LjE3MTQ1NzY3MzE.*_ga_6HH9YJMN9M*MTcxNDU3NjczMC4xLjAuMTcxNDU3NjczMC4wLjAuMA..&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;インストールリンク&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;最初の導入-モバイル開発とはどんな感じかをお話しします&#34;&gt;最初の導入 モバイル開発とはどんな感じかをお話しします。&lt;/h1&gt;&#xA;&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vSUYHaglKjkocTvVgLCKw5Np0DlzyVuDR6EtEP6XvlCDhbxPmuVkm45SiZ5Z4NitAO4jxTY8XYJyQGj/embed?start=false&amp;loop=true&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;569&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1wgY9WbdLNKvvWbbJlmStjmwVL3vXPX_CoIOe4G8A7Gk/edit?usp=sharing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;スライドリンク&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;おすすめの本&#34;&gt;おすすめの本&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;おすすめの本&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初めてのAndroidプログラミング&#xA;&lt;img width=&#34;300&#34; alt=&#34;71ce43XdxlL.jpg (231.8 kB)&#34; src=&#34;https://img.esa.io/uploads/production/attachments/13979/2021/06/10/84962/cfe0ba13-5889-4a67-86f0-d16e41eae674.jpg&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;androiddevelopersは便利だよ&#34;&gt;AndroidDevelopersは便利だよ&lt;/h1&gt;&#xA;&lt;p&gt;ちょっと前までは英語の記事だったり、少しわかりずらいなどがありましたが、今はすごくわかりやすくいい記事がたくさんあります。&#xA;ぜひ、ここの公式サイトを色々みてみると面白いかもしれないです。&#xA;&lt;a href=&#34;https://developer.android.com/?hl=ja&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;https://developer.android.com/?hl=ja&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;ライフサイクルは大事よくわからなかったら飛ばしてもok&#34;&gt;ライフサイクルは大事(よくわからなかったら飛ばしてもOK)&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ただのJavaのプログラムとAndroidのアプリの違いは？&lt;/li&gt;&#xA;&lt;li&gt;Androidアプリには、端末サイドでアプリを起動した時、アプリを立ち上げた後にホームに戻った時、アプリをタスキルした時とかタイミングがある。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img width=&#34;513&#34; alt=&#34;activity_lifecycle.png (45.7 kB)&#34; src=&#34;https://img.esa.io/uploads/production/attachments/13979/2021/07/09/84962/06cd2b16-5e50-4bf5-9102-51d265ba0a53.png&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;↑アクティビティのライフサイクル。&lt;/li&gt;&#xA;&lt;li&gt;アプリは起動すると、作られて、始まって、、、みたいなの。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;具体的な内容&#34;&gt;具体的な内容&lt;/h1&gt;&#xA;&lt;p&gt;以下の記事をみなさんに進めてもらいます。&#xA;その中でわからないところがあったら、適宜教えにいくスタイルにします。&#xA;残り1時間ぐらいになったら、今できている範囲で何か面白いひと工夫をWebなどで調べながら実装してもらって、少し発表会をして終わる感じにします。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.android.com/codelabs/basic-android-kotlin-compose-first-app?continue=https%3A%2F%2Fdeveloper.android.com%2Fcourses%2Fpathways%2Fandroid-basics-compose-unit-1-pathway-2%23codelab-https%3A%2F%2Fdeveloper.android.com%2Fcodelabs%2Fbasic-android-kotlin-compose-first-app&amp;amp;%3Bhl=ja&amp;amp;hl=ja#0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;AndroidでHelloWorld&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;とりあえず、アプリを作ってみて、出力される文字を変えてみるだけ。&lt;/li&gt;&#xA;&lt;li&gt;動作確認だけです。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;JetpackComposeで画面の表示の基礎&#xA;&lt;ul&gt;&#xA;&lt;li&gt;わかるところは飛ばして進めます。&lt;/li&gt;&#xA;&lt;li&gt;一部いらないところはスキップしていきます。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.android.com/courses/android-basics-compose/unit-1?hl=ja&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;ユニット 1: 初めての Android アプリ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.android.com/courses/android-basics-compose/unit-2?hl=ja&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;ユニット 2: アプリ UI を作成する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.android.com/courses/android-basics-compose/unit-3?hl=ja&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;ユニット 3: リストの表示とマテリアル デザインの使用&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Androidを使いこなす&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.android.com/courses/android-basics-compose/unit-5?hl=ja&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;ユニット 5: インターネットに接続する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.android.com/courses/android-basics-compose/unit-6?hl=ja&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;ユニット 6: データの永続化&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>TrainAlert「トレアラ」～電車乗り過ごし防止アプリ～</title>
      <link>http://localhost:1313/portfolio/trainalert/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/portfolio/trainalert/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;&#xA;&lt;p&gt;電車に乗っている際には様々な誘惑があると思います。&#xA;スマホを開けば、様々なコンテンツが広がり、椅子に座れば寝ることもできます。&#xA;そんな車内においてやれることが多い電車という交通手段ですが、一方でつい別のことに気をとられてしまい、乗り過ごしてしまうことがあります。&lt;/p&gt;&#xA;&lt;p&gt;この課題を解決するため、「トレアラ」は自動で通知を送信します。&#xA;事前に降車駅や乗換駅、乗る時間帯などの情報を登録しておくことで、駅に到着する前に通知を送信し、あなたのスマホがもうすぐ降りる時間であることをお知らせしてくれます。&lt;/p&gt;&#xA;&lt;p&gt;拘ったポイントとしては、上記の機能に加えてUIが挙げられます。&#xA;誰が見ても直感的に操作ができるようにするためにマテリアルデザインに準拠したデザインを活用し、各項目が何を表しているのか見ただけでわかるようにするためにIconを活用するといったの工夫を行いました。&#xA;またGoogleMapをアプリ内に埋め込むことで、どこの駅で通知をされるのか円や線を用いて表示し、リアルタイムで閲覧することもできます。&lt;/p&gt;&#xA;&lt;p&gt;今後としては現在いただいたフィードバックをもとに、通知メッセージをタップするまでの間はバイブレーションを止めないようにする機能や、イヤホン装着時のみ通知に音を流すなど、通知機能に関する強化を行っていきたいと考えています。&#xA;また細かいUIを改善していき、ユーザー目線の開発を行っていく予定です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「Clips」～新しいカタチのお気に入り保存アプリ～</title>
      <link>http://localhost:1313/portfolio/clips/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/portfolio/clips/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;&#xA;&lt;p&gt;コンセプトとしては、簡単になおかつわかりやすく保存をするアプリとしています。&lt;/p&gt;&#xA;&lt;p&gt;ターゲットとしては、つい保存したデータを無くしてしまい、どこにやったのかわからなくなっている人としています。また、Lineなどのメッセージ系SNSを使いデータを保存していて、保存期間がついつい過ぎてしまいデータが消えてしまった経験をよくする人もしています。&lt;/p&gt;&#xA;&lt;p&gt;データの入力の面でポイントとなる機能は、共有を使い、ブラウザや文字などをアプリに飛ばし簡単にデータの保存をできること、そのときにファビコンやウェブページのタイトルの取得をしてくれることです。&#xA;また、タグを用いデータの探索の時間を大幅に削れるように工夫をしました。&lt;/p&gt;&#xA;&lt;p&gt;データの検索の面でのポイントとなる機能は、アーカイブ機能を用い、用済みになったデータと今必要なデータで仕分けができるようになった点です。他にはタイトルと内容に文字列検索をかけることができ、タグを付け忘れてしまったデータでも探せるようになりました。&lt;/p&gt;&#xA;&lt;p&gt;今回UI面でも気をつけて作成しました。誰が見ても直感的に操作ができるようにマテリアルデザインに準拠して作成をしました。&#xA;また、この項目が何を表しているのか見ただけでわかるようにIconを用いました。&lt;/p&gt;&#xA;&lt;p&gt;今後としては、FireBaseを用いデータをAndroidやios、PCでも確認できるようにすることや、タグを自動的に振り分けれるよにする機能などを追加していきたいと考えています。&lt;/p&gt;&#xA;&lt;h1 id=&#34;技術構成&#34;&gt;技術構成&lt;/h1&gt;&#xA;&lt;p&gt;作成の動機としては、前期、教科書の「Realm」と「リサイクラービュー」を用い、レシートをカメラを使い保存をするというアプリ「ＲｅｃｅＣａｍｅ」を作りました。しかし、たくさんデータを保存していくとデータがごちゃついて、探しにくくなってしまうと考えたため、そこに「分類」というアイディアを掛け合わせてみました。そして出来上がったアプリは、「Clips」です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SIW 〜System Infomation Web〜</title>
      <link>http://localhost:1313/portfolio/siw/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/portfolio/siw/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;</description>
    </item>
    <item>
      <title>在庫管理お知らせアプリ</title>
      <link>http://localhost:1313/portfolio/potimane/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/portfolio/potimane/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;&#xA;&lt;p&gt;部材の管理を簡略化し、在庫数のカウントをしなくても部材の発注日にアプリの操作をするだけで、自動で過去の全体平均リードタイム計算し、次のリードタイムに達した当日に「お知らせ」してくれます。&lt;/p&gt;&#xA;&lt;p&gt;過去に部材を切らしてしまい、上司や同僚に迷惑をかけてしまった事がありませんか？&#xA;部材が十分在庫があるにもかかわらず、大量の部材を抱えてしまい自職場だけでなく他職場にも迷惑をかけてしまった事がありませんか？&#xA;これはそんな人に、部材の管理をお助けするアプリです。&#xA;軌道に乗れば、すべての部材の在庫を毎日確認する必要が無くなり、リードタイムに達した部材のみピンポイントで確認するだけでよくなると思います。&lt;/p&gt;&#xA;&lt;p&gt;このアプリを使用して部材の管理をしていても、本当の意味で部材を管理するのはあなた自身です。&#xA;例えば、突発的にその部材が必要な仕様が連続して生産する事になった場合には対応出来ません。また、自職場に十分材料が在るにも拘らず、必要以上に材料を確保していなければ気が済まない人には、効果がありません。&lt;/p&gt;&#xA;&lt;h1 id=&#34;告知用の資料&#34;&gt;告知用の資料&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./images/portfolio/potimane/1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/graph1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/graph1/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;utf-8&#34;&gt;&#xA;    &lt;title&gt;TEST&lt;/title&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1.0&#34;&gt;&#xA;    &lt;script&#xA;        src=&#34;https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@next/dist/chartjs-adapter-date-fns.bundle.min.js&#34;&gt;&lt;/script&gt;&#xA;    &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.js&#34;&gt;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&#xA;&lt;body&gt;&#xA;    &lt;div style=&#34;width:250px&#34;&gt;&#xA;        &lt;canvas id=&#34;myRadarChart&#34;&gt;&lt;/canvas&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;script&gt;&#xA;        var ctx = document.getElementById(&#34;myRadarChart&#34;);&#xA;        var myChart = new Chart(ctx, {&#xA;            type: &#39;radar&#39;,&#xA;            data: {&#xA;                //データの各項目のラベル(上から時計回り)&#xA;                labels: [&#34;Docker&#34;, &#34;GitHub&#34;, &#34;AWS&#34;, &#34;Firebase&#34;, &#34;GCP&#34;],&#xA;                //データ設定&#xA;                datasets: [&#xA;                    {&#xA;                        //グラフのデータ(上から時計回り)&#xA;                        data: [50, 70, 20, 60, 20],&#xA;                        //グラフ全体のラベル&#xA;                        label: &#34;プラットフォーム&#34;,&#xA;                        //背景色&#xA;                        backgroundColor: &#34;rgba(255,160,0,0.1)&#34;,&#xA;                        //線の終端を四角にするか丸めるかの設定。デフォルトは四角(butt)。&#xA;                        borderCapStyle: &#34;butt&#34;,&#xA;                        //線の色&#xA;                        borderColor: &#34;rgba(255,160,0)&#34;,&#xA;                        //線を破線にする&#xA;                        borderDash: [],&#xA;                        //破線のオフセット(基準点からの距離)&#xA;                        borderDashOffset: 0.0,&#xA;                        //線と線が交わる箇所のスタイル。初期値は&#39;miter&#39;&#xA;                        borderJoinStyle: &#39;miter&#39;,&#xA;                        //線の幅。ピクセル単位で指定。初期値は3。&#xA;                        borderWidth: 3,&#xA;                        //グラフを塗りつぶすかどうか。初期値はtrue。falseにすると枠線だけのグラフになります。&#xA;                        fill: true,&#xA;                        //複数のグラフを重ねて描画する際の重なりを設定する。z-indexみたいなもの。初期値は0。&#xA;                        order: 0,&#xA;                        //0より大きい値にすると「ベジェ曲線」という数式で曲線のグラフになります。初期値は0。&#xA;                        lineTension: 0&#xA;                    }&#xA;                ]&#xA;            },&#xA;            options: {&#xA;                scales: {&#xA;                    r: {&#xA;                        //グラフの最小値・最大値&#xA;                        min: 0,&#xA;                        max: 100,&#xA;                        //背景色&#xA;                        backgroundColor: &#39;white&#39;,&#xA;                        //グリッドライン&#xA;                        grid: {&#xA;                            color: &#39;silver&#39;,&#xA;                        },&#xA;                        //アングルライン&#xA;                        angleLines: {&#xA;                            color: &#39;silver&#39;,&#xA;                        },&#xA;                        //各項目のラベル&#xA;                        pointLabels: {&#xA;                            color: &#39;black&#39;,&#xA;                        },&#xA;                    },&#xA;                },&#xA;            }&#xA;        });&#xA;&#xA;    &lt;/script&gt;&#xA;    &lt;/div&gt;&#xA;&lt;/body&gt;&#xA;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/graph2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/graph2/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;utf-8&#34;&gt;&#xA;    &lt;title&gt;TEST&lt;/title&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1.0&#34;&gt;&#xA;    &lt;script&#xA;        src=&#34;https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@next/dist/chartjs-adapter-date-fns.bundle.min.js&#34;&gt;&lt;/script&gt;&#xA;    &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.js&#34;&gt;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&#xA;&lt;body&gt;&#xA;    &lt;div style=&#34;width:250px&#34;&gt;&#xA;        &lt;canvas id=&#34;myRadarChart&#34;&gt;&lt;/canvas&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;script&gt;&#xA;        var ctx = document.getElementById(&#34;myRadarChart&#34;);&#xA;        var myChart = new Chart(ctx, {&#xA;            type: &#39;radar&#39;,&#xA;            data: {&#xA;                //データの各項目のラベル(上から時計回り)&#xA;                labels: [&#34;Next&#34;, &#34;React&#34;, &#34;PHP&#34;, &#34;Ruby&#34;, &#34;java&#34;],&#xA;                //データ設定&#xA;                datasets: [&#xA;                    {&#xA;                        //グラフのデータ(上から時計回り)&#xA;                        data: [50, 40, 5, 30, 40],&#xA;                        //グラフ全体のラベル&#xA;                        label: &#34;フロント&#34;,&#xA;                        //背景色&#xA;                        backgroundColor: &#34;rgba(255,0,0,0.1)&#34;,&#xA;                        //線の終端を四角にするか丸めるかの設定。デフォルトは四角(butt)。&#xA;                        borderCapStyle: &#34;butt&#34;,&#xA;                        //線の色&#xA;                        borderColor: &#34;rgba(255,0,0)&#34;,&#xA;                        //線を破線にする&#xA;                        borderDash: [],&#xA;                        //破線のオフセット(基準点からの距離)&#xA;                        borderDashOffset: 0.0,&#xA;                        //線と線が交わる箇所のスタイル。初期値は&#39;miter&#39;&#xA;                        borderJoinStyle: &#39;miter&#39;,&#xA;                        //線の幅。ピクセル単位で指定。初期値は3。&#xA;                        borderWidth: 3,&#xA;                        //グラフを塗りつぶすかどうか。初期値はtrue。falseにすると枠線だけのグラフになります。&#xA;                        fill: true,&#xA;                        //複数のグラフを重ねて描画する際の重なりを設定する。z-indexみたいなもの。初期値は0。&#xA;                        order: 0,&#xA;                        //0より大きい値にすると「ベジェ曲線」という数式で曲線のグラフになります。初期値は0。&#xA;                        lineTension: 0&#xA;                    }&#xA;                ]&#xA;            },&#xA;            options: {&#xA;                scales: {&#xA;                    r: {&#xA;                        //グラフの最小値・最大値&#xA;                        min: 0,&#xA;                        max: 100,&#xA;                        //背景色&#xA;                        backgroundColor: &#39;white&#39;,&#xA;                        //グリッドライン&#xA;                        grid: {&#xA;                            color: &#39;silver&#39;,&#xA;                        },&#xA;                        //アングルライン&#xA;                        angleLines: {&#xA;                            color: &#39;silver&#39;,&#xA;                        },&#xA;                        //各項目のラベル&#xA;                        pointLabels: {&#xA;                            color: &#39;black&#39;,&#xA;                        },&#xA;                    },&#xA;                },&#xA;            }&#xA;        });&#xA;&#xA;    &lt;/script&gt;&#xA;    &lt;/div&gt;&#xA;&lt;/body&gt;&#xA;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/graph3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/graph3/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;utf-8&#34;&gt;&#xA;    &lt;title&gt;TEST&lt;/title&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1.0&#34;&gt;&#xA;    &lt;script&#xA;        src=&#34;https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@next/dist/chartjs-adapter-date-fns.bundle.min.js&#34;&gt;&lt;/script&gt;&#xA;    &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.js&#34;&gt;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&#xA;&lt;body&gt;&#xA;    &lt;div style=&#34;width:250px&#34;&gt;&#xA;        &lt;canvas id=&#34;myRadarChart&#34;&gt;&lt;/canvas&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;script&gt;&#xA;        var ctx = document.getElementById(&#34;myRadarChart&#34;);&#xA;        var myChart = new Chart(ctx, {&#xA;            type: &#39;radar&#39;,&#xA;            data: {&#xA;                //データの各項目のラベル(上から時計回り)&#xA;                labels: [&#34;Kotlin&#34;, &#34;Swift&#34;, &#34;Dart&#34;, &#34;JetpackCompose&#34;, &#34;SwiftUI&#34;],&#xA;                //データ設定&#xA;                datasets: [&#xA;                    {&#xA;                        //グラフのデータ(上から時計回り)&#xA;                        data: [90, 50, 50, 70, 30],&#xA;                        //グラフ全体のラベル&#xA;                        label: &#34;モバイル技術&#34;,&#xA;                        //背景色&#xA;                        backgroundColor: &#34;rgba(0,0,255,0.1)&#34;,&#xA;                        //線の終端を四角にするか丸めるかの設定。デフォルトは四角(butt)。&#xA;                        borderCapStyle: &#34;butt&#34;,&#xA;                        //線の色&#xA;                        borderColor: &#34;rgba(0,0,255)&#34;,&#xA;                        //線を破線にする&#xA;                        borderDash: [],&#xA;                        //破線のオフセット(基準点からの距離)&#xA;                        borderDashOffset: 0.0,&#xA;                        //線と線が交わる箇所のスタイル。初期値は&#39;miter&#39;&#xA;                        borderJoinStyle: &#39;miter&#39;,&#xA;                        //線の幅。ピクセル単位で指定。初期値は3。&#xA;                        borderWidth: 3,&#xA;                        //グラフを塗りつぶすかどうか。初期値はtrue。falseにすると枠線だけのグラフになります。&#xA;                        fill: true,&#xA;                        //複数のグラフを重ねて描画する際の重なりを設定する。z-indexみたいなもの。初期値は0。&#xA;                        order: 0,&#xA;                        //0より大きい値にすると「ベジェ曲線」という数式で曲線のグラフになります。初期値は0。&#xA;                        lineTension: 0&#xA;                    }&#xA;                ]&#xA;            },&#xA;            options: {&#xA;                scales: {&#xA;                    r: {&#xA;                        //グラフの最小値・最大値&#xA;                        min: 0,&#xA;                        max: 100,&#xA;                        //背景色&#xA;                        backgroundColor: &#39;white&#39;,&#xA;                        //グリッドライン&#xA;                        grid: {&#xA;                            color: &#39;silver&#39;,&#xA;                        },&#xA;                        //アングルライン&#xA;                        angleLines: {&#xA;                            color: &#39;silver&#39;,&#xA;                        },&#xA;                        //各項目のラベル&#xA;                        pointLabels: {&#xA;                            color: &#39;black&#39;,&#xA;                        },&#xA;                    },&#xA;                },&#xA;            }&#xA;        });&#xA;&#xA;    &lt;/script&gt;&#xA;    &lt;/div&gt;&#xA;&lt;/body&gt;&#xA;&#xA;&lt;/html&gt;</description>
    </item>
  </channel>
</rss>
